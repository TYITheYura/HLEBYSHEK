/* Тут применяем для абсолютно всех элементов некоторые стили */

* {
	margin: 0;
	box-sizing: border-box;
}

/* Шрифты */

/* Яхуй знает как объяснить что с ними происходит в процессе импорта, разве что по коду опишу:
Сначала шрифту через font-family задаётся имя, потом в src указывается путь к шрифту. Профит! */
@font-face {
	font-family: Circle;
	src: url("../fonts/Circle.ttf");
}

@font-face {
	font-family: Pollywog;
	src: url("../fonts/Pollywog.ttf");
}

@font-face {
	font-family: FuturaRound;
	src: url("../fonts/FuturaRound.ttf");
}

/* Размеры с вьюпорта */
/* Для чего это нужно? body сам по себе не имеет размеров по высоте - он их "получает" за счёт элементов, которые в нём содержаться. А так, он получает размеры с html (всего документа)
Эта фигня пришла с небольшим опытом, т.к. именно из-за отсутствия этой мелочи футтер (иногда) не хочет крепиться к низу страницы */
body {
	height: 100%;
	overflow: auto;
	background-color: rgb(40, 25, 20);
}

/* Header */

/* Стили для header блока в html. Вообще, тут основная задача закрепить хеддер вверху страницы так, что-бы при прокрутке он не сползал
Второстепенная задача - расставить элементы по хедеру. Мне это удобнее grid'ом делать, т.к. первый сайт я именно на нём и ворочается.
Дальше уже сами стили идут, цвета, тени. Ну и z-index, что-бы элемент был на переднем плане*/

header {
	/* position: sticky делает магию: вместе с top: 0 они НЕ дают хедеру уходить вверх при скролле страницы	*/
	position: sticky;
	top: 0;
	z-index: 1;
	height: 4vw;
	/* Сеточку делаем. */
	display: grid;
	/* Столбики, можно сказать, делим элемент fr`ами на две части (столько там fr`ов (fr = fraction) указано потому-что) */
	grid-template-columns: 1fr 1fr;
	background-color: rgba(230, 209, 165, 0.90);
	box-shadow: 0px 0px 50px 10px rgba(0, 0, 0, 0.75);
}

/* Header: Логотип */
/* Конкретно левая часть хедера */
/* Отступы для кнопочки с логотипом (Слева/справа) */
.header__button {
	margin: auto 3vw;
}


/* Вот есть у нас классы в html`е, да? Класс применяется к div`у, допустим. А что если в div`е элемент есть, и к нему какого-то особого смысла применять классы нет?
Можно задать ему стиль через класс div элемента. Буквально: сначала пишем класс, потом тег, название элемента (как удобнее называй), и так задаём стиль */
/* Транзишн тут используется что-бы в случае взаимодействия с элементом (ниже есть тот же класс с псевдо классом hover) он менял свой размер/цвет/положение (характеристики короче) не так резко, а более плавно */
/* Тут взаимодействуем конкретно с картинкой, не с самим классом. Задаём ей ширину и обтекание (оно кстати немного фиксит положение элемента) */
.header__button img {
	transition: all .35s;
	width: 15vw;
	float: left;
}

/* При наведении на элемент (изображение) оно становится больше, появляется тень */
.header__button img:hover {
	filter: drop-shadow(0 0 0.5em rgb(40, 30, 20));
	transform: scale(1.075)
}

/* Header: Ссылки */
/* Конкретно правая часть хедера */
/* Ставим отступы, шрифт и размер для него */
.header__action-buttons {
	margin: auto 3vw;
	/* Один из своих шрифтов применяем */
	font-family: Pollywog;
	/* А вот эта хуйня с clamp интересная. Предназначено для динамической регулировки шрифта.
	В первом значении указывается минимальный размер шрифта. При сильном ресайзе (или масштабировании) окна, шрифт будет иметь размер, указаный в первом значении (НЕ МЕНЬШЕ)
	Второе значение же устанавливает предпочтительный размер, который используется в зависимости от доступного пространства 
	Третье - максимальное значение. Вот, допустим, экран большой, либо масштаб большой делаешь. На весь экран видеть одну букву будет неприятно, да?
	Вот это значение данную проблему и решает */
	font-size: clamp(0.25em, 1.5vw, 1.2em);
}

/* Ссылкам ставим всё тот же транзишн. Отключаем полосочку снизу ссылки (text-decoration), ставим отступы, цвета и обтекание (фиксит положение элементов) */
.header__action-buttons a {
	transition: all .35s;
	text-decoration: none;
	margin-left: 1em;
	/* color - это цвет для шрифта (да да, именно). Для другого используются свои стили (как с background-color - цвет фона) */
	color: black;
	float: right;
}

/* Бла-бла-бла это уже проходили, ничего тут не изменилось. Просто при наведении на ссылку в хедере текст меняет цвет, размер и отбрасывает тень */
.header__action-buttons a:hover {
	filter: drop-shadow(0px 0px 2.5px rgb(40, 30, 20));
	color: rgb(188, 158, 143);
	/* Ресайз объекта (в n) */
	transform: scale(1.075)
}

/* Стили для всплывающего окошка в хедере */
/* По умолчанию из-за применённых стилей элемент не имеет размеров (transform: scale(0). Штука прикольная, при том, очень)*/
/* Важно то, что этот элемент фактически находится в grid'е, но из-за position: absolute его можно хоть куда пристроить. */
/* Фактически, из-за этого он выпадает из страницы, накладываясь на какой-то элемент, но при этом не увеличивая размеры контейнеров (элементов) */
/* Тут и задаются размеры для этой маленькой плашки, её цвет и всё, что пожелаешь. */
.header__howto-popup {
    z-index: 0;
    position: absolute;
    background-color: rgba(230, 209, 165, 0.90);
    padding: 2vw;
    right: 2vw;
    top: 50%;
    width: 30vw;
    text-align: justify;
    border-radius: 1vw;
    opacity: 0;
    visibility: hidden;
    transition: all .5s;
    transform: scale(0);
    transform-origin: 50% 0%;
}

/* Для ссылок делаем отдельный стиль, который тут НЕ обязателен т.к. кнопка "Как заказать?" уже не существует. В будущем можешь удалить, что-бы не возникали вопросы */
.header__howto-popup a {
	float: none;
	margin: 0;
	color: rgb(80, 40, 20);
}

/* В html, что-бы этот стиль работал, нужно элементу дать tabindex. Его вторым свойством (фокусом для элемента) можно сделать кнопочки, при нажатии на которые происходит какое-то действие (в рамках придания элементам стилей) */
/* При нажатии на кнопку (ссылку в хедере) элемент изменит некоторые стили. Кароче, из основного - делаем элемент видимым и смещаем его по странице. */
/* Фишка в том, что стили будут применены до того момента, пока фокус не исчезнет (до момента, пока пользователь не кликнет в другое место) */
/* js ты бы явно не хотел объяснять, поэтому проще всего будет рассказать как работает ЭТО */
.header__howto-popup-button:focus-within .header__howto-popup {
    transform: scale(1.0);
    opacity: 1;
    top: 6vw;
    visibility: visible;
}

/* Стиль для пары строк в всплывающем окне. Посмотри, где в html используется, что делает на странице в браузере и сразу всё понятно станет. */
.highlight {
	color: rgb(90, 45, 25);
}

/* Main */

/* Мейн элемент. Основной контент на странице (можешь сам убедиться, посмотрев в html, что в нём содержиться) */
/* Некоторые стили (такие как position: relative, height: 100%, z-index: 0) тут не нужны, без них тоже всё работает (либо это у меня кэш не полностью чиститься). Просто, давно без них ничего не работало, поэтому в конце они и остались (я не просматривал код на наличие бесполезных стилей) */
/* Задачи "бесполезных стилей" были в том, что-бы мейн элемент не перекрывал хедер, ну и что-бы размер мейна был как у body */
/* Из основного - элемент сдвигается вверх, потому-что хеддер всё же отжирает немного пространства на странице. */
main {
	position: relative;
	z-index: 0;
	margin-top: -4vw;
	height: 100%;
}

/* Main: Слоган */
/* Всему окну задаётся размер вьюпорта по вертикали (100% vh) */
/* position: relative тут не несёт особой пользы */
/* Всё, что осталось дальше - выравнивает элементы, которые содержаться В элементе (чек html) по центру */
.main__start {
	position: relative;
	display: grid;
	place-items: center;
	height: 100vh;
}

/* Стили для слогана (общие) */
/* grid-template-columns пользы не несёт, в отличии от grid-template-rows, который как раз "стыкует" элементы */
.main__slogan {
	display: grid;
	grid-template-rows: 1fr 0.15fr 0.5fr;
	grid-template-columns: 1fr;
	text-align: center;
	font-family: Circle;
	color: rgb(40, 30, 20);
	text-shadow: 0px 0px 5vw rgba(143, 116, 93, 1);
	user-select: none;
}

/* Три последующие стиля, в основном, задают только размеры */
.main__slogan-upper-content {
	font-size: 10vw;
}

.main__slogan-center-content {
	display: grid;
	/* Чек html для лучшего понимания следующей строки */
	grid-template-columns: repeat(3, 1fr);
	font-size: 3.5vw;
}

.main__slogan-bottom-content {
	font-size: 7.5vw;
	/* Тут немного отступ меньше делается, ибо иначе текст находится слишком далеко */
	line-height: 0.8;
}

/* Main: Задний фон слогана, анимации */
/* Тут создаётся анимка. Можно сказать правило, по которому будет следовать элемент */
@keyframes backgroundMove {
    0% {
        background-position: 50vw 0vh;
    }
	50% {
        background-position: 0vw 50vh;
    }
	100% {
        background-position: 50vw 0vh;
    }
}

/* Стили для бг задаются (чек html, найди его, посмотри на него) */
/* В animation используется название анимации (которая была создана keyframe`ом) */
.main__slogan-background {
    position: absolute;
    z-index: -1;
    height: 100vh;
    width: 100%;
    background-image: url("../pictures/bg/main_bg.png");
    background-position: center;
    background-color: rgba(230, 215, 185);
    background-size: 7.5vw;
    animation: backgroundMove 20s ease-in-out forwards infinite;
	/* Блюрит содержание элемента (поэтому он и отдельно стоит) */
    filter: blur(1.25px);
	/* "Режет" блюр по краям элемента (без него блюр выходит за рамки элемента) */
    clip-path: inset(0);
}

/* Main: Анимации для слогана */

@keyframes fadeInSlideUp {
	0% {
		opacity: 0;
		transform: translateY(50px);
	}
	100% {
		opacity: 1;
		transform: translateY(0);
	}
}

/* Сразу трём классам (похуй, элементам) задаётся стиль. */
/* Из-за анимации он будет меняться у одного из классов */
.main__slogan-upper-content,
.main__slogan-center-content span,
.main__slogan-bottom-content {
	opacity: 0;
	transform: translateY(50px);
	animation: fadeInSlideUp 1s ease forwards;
}

/* КД анимкам ставим. */
.main__slogan-upper-content {
	animation-delay: 0s;
}	

/* nth-child() - чек html для лучшего понимания */
/* Внутри main__slogan-center-content есть span'ы. Что-бы не задавать каждому отдельный класс, можно задать стиль таким способом */
/* Номер указывает то, какой span по порядку берём из html */
.main__slogan-center-content span:nth-child(1) {
	animation-delay: 0.5s;
}

.main__slogan-center-content span:nth-child(2) {
	animation-delay: 1s;
}

.main__slogan-center-content span:nth-child(3) {
	animation-delay: 1.5s;
}

.main__slogan-bottom-content {
	animation-delay: 2s;
}

/* Main: второе "окно" */
/* Идёт после second-window. В остальном, содержит ровно то, что указывалось выше. */
/* padding'и задают внутренние отступы. Элемент из-за box-sizing свои размеры сохраняет. */
.main__second-window {
	position: relative;
	padding: 12.5vh 7.5vw;
	background-image: url(../pictures/bg/about_background_image.jpg);
	background-size: cover;
	background-position: center;
}

.main__second-window-text-block {
	font-family: FuturaRound;
	text-shadow: 0px 0px 2em rgba(80, 60, 40, 1);
	box-shadow: 0px 0.8em 2em rgba(0, 0, 0, 1);
	mix-blend-mode: hard-light;
	background-color: rgba(255, 255, 255, 0.70);
	border-radius: 2.5vw;
	padding: 4vw;
}

.main__second-window-titles {
	text-align: center;
	font-size: clamp(0.25em, 2vw, 3em);
	color: rgb(70, 40, 20);
}

.main__second-window-text {
	text-align: justify;
	text-align-last: center;
	font-size: clamp(0.25em, 1.85vw, 2em);
	color: rgb(40, 30, 20);
}

.main__second-window-text br {
	margin-bottom: 1em;
}

/* Создаётся некий "элемент" после заголовка h1, которому задаём стили. Это та самая полосочка */
.main__second-window-titles h1::after {
    content: "";
    display: block;
    width: 7.5vw;
    height: 0.5vw;
    border-radius: 1em;
    background-color: rgb(140, 80, 40);
    margin: 0.4em auto 0.4em auto;
}

/* Анимка текста до/после наведения скролла */

/* Тут уже относится к js`у. Сначала элементу задаётся смещение, транзишн и прозрачность */
.main__second-window-text-block,
.main__second-window-titles {
    opacity: 0;
    transform: translateY(50%);
    transition: all 1s;
}

/* После срабатывания скрипта в js`е выполняется это */
.main__second-window-text-block.animate {
    opacity: 1;
    transform: translateY(0);
    transition-delay: 0s;
}
/* И это. Можно сказать, возвращаем элементы на свои места */
.main__second-window-titles.animate {
    opacity: 1;
    transform: translateY(0);
    transition-delay: .5s;
}

/* Main: третье "окно" */

.main__third-window {
	position: relative;
	background-image: url(../pictures/bg/background_products.jpg);
	background-size: cover;
	padding: 5vw 0;
	font-family: FuturaRound;
	color: rgb(40, 30, 20);
}

.main__third-window-titles {
	font-size: clamp(0.5em, 2vw, 3em);
	text-align: center;
	color: rgba(124, 70, 34, 0.95);
	text-shadow: 0px 0px 2vw rgba(255, 255, 255, 1);
}

.main__third-window-titles h1::after {
    content: "";
    display: block;
    width: 7.5vw;
    height: 0.5vw;
    border-radius: 1em;
    background-color: rgba(226, 139, 68, 0.95);
    margin: 0.4em auto 0.4em auto;
}

.main__third-window-products {
	display: grid;
	grid-template-columns: repeat(4	, 1fr);
	text-align: center;
	width: 65%;
	margin: auto;
}

.main__third-window-product {
	width: 90%;
	margin: 4% auto;
	padding: 5%;
	background-color: white;
	border-radius: 10%;
	font-size: clamp(0.25em, 1.15vw, 1.5em);
	box-shadow: 0px 0.8em 1em rgba(0, 0, 0, 0.25);
	transition: all .35s;
}

.main__third-window-product:hover {
	z-index: 1;
	transform: scale(1.1);
	box-shadow: 0px 1em 1.5em rgba(0, 0, 0, 0.75);
}

.main__third-window-product-info {
	position: absolute;
	background-color: rgba(255, 250, 235, 0.75);
	width: 20vw;
	padding: 1vw;
	border-radius: 1vw;
	top: 10%;
	left: -20%;
	opacity: 0;
	visibility: hidden;
	font-size: clamp(0.25em, 1.15vw, 1.5em);
	transition: all .35s;
}

.main__third-window-product:hover .main__third-window-product-info {
	opacity: 100;
	left: 40%;
	visibility: visible;
}

.main__third-window-product img {
	width: 100%;
	border-radius: 10%;
}

/* Main: четвёртое "окно" */

.main__fourth-window {
	position: relative;
	background-image: url(../pictures/bg/background_services.jpg);
	background-size: cover;
	padding: 5vw 0;
	font-family: FuturaRound;
	color: rgb(40, 30, 20);
}

.main__fourth-window-titles {
	font-size: clamp(0.25em, 2vw, 3em);
	text-align: center;
	color: rgba(124, 70, 34, 0.95);
	text-shadow: 0px 0px 2vw rgba(255, 255, 255, 1);
}

.main__fourth-window-titles h1::after {
    content: "";
    display: block;
    width: 7.5vw;
    height: 0.5vw;
    border-radius: 1em;
    background-color: rgba(226, 139, 68, 0.95);
    margin: 0.4em auto 0.4em auto;
}

.main__fourth-window-actions {
	width: 65%;
	display: grid;
	grid-template-rows: repeat(5, 1fr);
	margin: auto;
}

.main__fourth-window-action-button {
	position: relative;
	width: 100%;
	margin: 0.5vw auto;
	font-size: clamp(0.25em, 1.15vw, 1.5em);
	transition: transform .35s, z-index 1s;
}

.main__fourth-window-action-button-text {
	position: relative;
	width: 100%;
	background-color: white;
	text-align: center;
	padding: 1vw;
	border-radius: 1vw;
	box-shadow: 0px 0.8em 1em rgba(0, 0, 0, 0.15);
	z-index: 0;
}

.main__fourth-window-action-text {
	position: absolute;
	visibility: hidden;
	opacity: 0;
	top: -10%;
	width: 100%;
	z-index: 1;
	padding: 2vw;
	background-color: rgba(255, 250, 235, 0.9);
	border-radius: 1vw;
	box-shadow: 0px 0.8em 1em rgba(0, 0, 0, 0.20);
	text-align: justify;
}

.main__fourth-window-action-button:hover {
	transform: scale(1.035);
}

.main__fourth-window-action-button:focus-within {
	transform: scale(1.075);
	z-index: 1;
}

.main__fourth-window-action-button:focus-within .main__fourth-window-action-text {
	visibility: visible;
	opacity: 1;
	top: 70%;
	z-index: 1;
	transition: all .35s, z-index 0s;
}

.main__fourth-window-action-button:focus-within .main__fourth-window-action-button-text {
	transition: all .35s, z-index 0s;
	border-radius: 1vw 1vw 0 0;
	z-index: 2;
}

/* Футер */

footer {
	position: relative;
	z-index: -1;
}

.footer__bg-section {
	position: absolute;
	width: 100%;
	height: 100%;
	background-image: url("../pictures/bg/main_bg.png");
	background-size: 7.5vw;
	background-position: center;
	background-color: rgba(230, 215, 185, 1);
	filter: blur(1.25px);
	clip-path: inset(0);
}

.footer__section {
	position: relative;
	display: grid;
	grid-template-columns: 1fr 1fr;
	padding: 2vw;
	font-family: FuturaRound;
}

.footer__company-label {
	display: grid;
	grid-template-rows: 1fr 0.5fr;
	margin: auto;
	font-size: clamp(0.3em, 1.5vw, 1.5em);
	filter: drop-shadow(0 0 1em rgb(242, 198, 144));
}

.footer__company-slogan {
	margin: auto;
}

.footer__company-logo {
	width: 14.5em;
	margin: auto;
}

.footer__contacts {
	display: grid;
	grid-template-columns: 1fr 1fr;
	margin: auto;
	color: rgb(40, 25, 20);
	font-size: clamp(0.3em, 1.25vw, 1.5em);
	text-shadow: 0 0 1em rgb(242, 198, 144);
	align-items: center;
}

.footer__contacts a {
	color: rgb(10, 10, 80);
}

.footer__text-highlight { 
	color: rgb(80, 50, 40);
	font-size: clamp(0.3em, 1.5vw, 1.5em);
}

/* Разделение между секциями (окнами) */

main section {
	margin-bottom: 0.2vw;
}
